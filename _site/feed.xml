<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-10T04:59:13+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ho323</title><subtitle>개발 블로그</subtitle><author><name>김호성</name></author><entry><title type="html">바이낸스에서 비트코인 ohlcv 5분봉 가져오기</title><link href="http://localhost:4000/python/binance-btc-5m-ohlcv/" rel="alternate" type="text/html" title="바이낸스에서 비트코인 ohlcv 5분봉 가져오기" /><published>2023-03-09T00:00:00+09:00</published><updated>2023-03-09T00:00:00+09:00</updated><id>http://localhost:4000/python/binance-btc-5m-ohlcv</id><content type="html" xml:base="http://localhost:4000/python/binance-btc-5m-ohlcv/"><![CDATA[<p>나는 평소에 바이낸스 선물 거래를 한다.<br />
그러다 어떤 데이터를 넣고 실험해 보고 싶은 게 생겨서 강화 학습으로 만들어 보려고 한다.</p>

<p>강화 학습 공부도 할 겸.</p>

<h2 id="5분봉으로-선택한-이유">5분봉으로 선택한 이유</h2>
<p>나는 단타 모델로 만들 거라서 5분봉 데이터를 사용하기로 했다.<br />
그렇다고 1분봉으로 하기엔 거래가 너무 자주 일어나서 수수료 때문에 손해를 볼 것 같았다.<br />
<del>바이낸스 시장가 수수료 양아치</del></p>

<p>문제는 바이낸스에선 최대 1000개의 데이터만 가져올 수 있다.<br />
그래서 지금부터라도 천천히 데이터를 쌓아가 될 것 같다.</p>

<h2 id="5분봉-가져오는-코드">5분봉 가져오는 코드</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">csv</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="n">url</span> <span class="o">=</span> <span class="s">"https://api.binance.com/api/v3/klines"</span>
<span class="n">interval</span> <span class="o">=</span> <span class="s">"5m"</span>
<span class="n">symbol</span> <span class="o">=</span> <span class="s">"BTCUSDT"</span>
<span class="n">limit</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># 5분봉 데이터를 하나씩 가져옴
</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">"symbol"</span><span class="p">:</span> <span class="n">symbol</span><span class="p">,</span> <span class="s">"interval"</span><span class="p">:</span> <span class="n">interval</span><span class="p">,</span> <span class="s">"limit"</span><span class="p">:</span> <span class="n">limit</span><span class="p">}</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">"btc_usdt_ohlcv.csv"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">"a"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="s">""</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="n">writer</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="nf">writer</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
                <span class="n">timestamp</span> <span class="o">=</span> <span class="n">item</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="mi">1000</span>  <span class="c1"># 밀리초를 초 단위로 변환
</span>                <span class="n">dt_object</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">fromtimestamp</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)</span>
                <span class="n">dt_str</span> <span class="o">=</span> <span class="n">dt_object</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="s">"%Y-%m-%d %H:%M"</span><span class="p">)</span>
                <span class="n">open_price</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">high_price</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
                <span class="n">low_price</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
                <span class="n">close_price</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
                <span class="n">volume</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span>
                <span class="n">writer</span><span class="p">.</span><span class="nf">writerow</span><span class="p">([</span><span class="n">dt_str</span><span class="p">,</span> <span class="n">open_price</span><span class="p">,</span> <span class="n">high_price</span><span class="p">,</span> <span class="n">low_price</span><span class="p">,</span> <span class="n">close_price</span><span class="p">,</span> <span class="n">volume</span><span class="p">])</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Error:"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">)</span>

    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>  <span class="c1"># 5분 대기
</span></code></pre></div></div>
<p>코드는 300초(5분)마다 반복 실행된다.</p>

<p>“https://api.binance.com/api/v3/klines”에서 바이낸스 BTC/USDT 쌍의 5분봉 데이터를 가져온다.<br />
가져온 데이터의 ohlcv 데이터만 btc_usdt_ohlv.csv에 저장한다.</p>

<p>newline 인자를 빈 문자열(““)로 지정하여 csv 파일에 빈 줄을 삽입하지 않도록 한다.</p>

<p>datetime 모듈을 사용하여 timestamp를 datetime 객체로 변환하고, strftime() 메서드를 사용하여 필요한 형식으로 포맷한다.<br />
이 코드에서는 “%Y-%m-%d %H:%M” 형식으로 포맷팅한다. 이 형식은 연도-월-일 시:분으로 표현한다.</p>]]></content><author><name>김호성</name></author><category term="Python" /><category term="Python" /><category term="Crawling" /><category term="ML" /><category term="Reinforcement Learning" /><summary type="html"><![CDATA[나는 평소에 바이낸스 선물 거래를 한다. 그러다 어떤 데이터를 넣고 실험해 보고 싶은 게 생겨서 강화 학습으로 만들어 보려고 한다.]]></summary></entry><entry><title type="html">Flutter App 기획</title><link href="http://localhost:4000/flutter/flutter-app-planning/" rel="alternate" type="text/html" title="Flutter App 기획" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-07T00:00:00+09:00</updated><id>http://localhost:4000/flutter/flutter-app-planning</id><content type="html" xml:base="http://localhost:4000/flutter/flutter-app-planning/"><![CDATA[<p>최근에 취미로 클라이밍을 하고 있는데 괜찮은 커뮤니티 앱이 있다면 참 좋겠다 싶었다.<br />
<del>기다릴 내가 아니다.</del> 이번 기회에 앱도 만들어 보자라는 생각으로 친구랑 둘이 배워서 만들기로 했다.</p>

<p>일단 목표 출시 기간은 4개월이다.</p>

<h2 id="개발-준비">개발 준비</h2>
<p>가장 큰 문제는 내가 앱 개발을 전혀 모른다.<br />
당장 인프런에 코드팩토리님의 강의를 결제해서 지난 3개월 간 공부했다.<br />
함께 만드는 친구는 코딩애플님의 강의를 봤다고 한다.</p>

<h2 id="개발-환경">개발 환경</h2>
<ul>
  <li>Android, iOS (Flutter)</li>
  <li>Firebase
Flutter를 사용하면 안드로이드와 ios 둘 다 된다는 점이 정말 장점인것 같다.<br />
그리고 또 하나의 장점은 Firebase를 사용해서 데이터베이스를 쉽게 이용할 수 있는 점이다.</li>
</ul>

<h2 id="git-전략">Git 전략</h2>
<p>늘 혼자 개발하다가 협업을 하려니 어떻게 코드를 관리할지부터 정해야 했다.<br />
<img src="https://user-images.githubusercontent.com/86637300/223773251-0eb16858-f702-4e05-9e9f-ac6126eb42de.png" alt="1" /><br />
개발 단계에선 대충 이런 흐름으로 만들기로 했다.<br />
설명하자면 나랑 친구 각자 브런치를 만들고, 만들기로 한 기능을 각 브런치에 push하면 서로 코드를 리뷰한 후에 main에 병합하는 간단한 전략이다.</p>

<p>아래 링크를 참고했다.<br />
<a href="https://techblog.woowahan.com/2553/">우린 Git-flow를 사용하고 있어요 | 우아한형제들 기술블로그</a></p>

<h2 id="디자인-figma">디자인 Figma</h2>
<p>Figma를 활용했다.<br />
<img src="https://user-images.githubusercontent.com/86637300/223773254-7ab27113-2253-4b36-ad95-272a4f9159d7.png" alt="2" /><br />
대충 UI만 디자인했다.<br />
세부 디자인은 나중에 디자이너의 도움을 받을 생각이다.</p>

<p>피그마를 처음 활용해봤는데 생각보다 다루기 쉽더라.</p>
<ul>
  <li>V - 커서</li>
  <li>H - 손(화면 움직이기)</li>
  <li>T - 텍스트 필드</li>
  <li>R - 네모 그리기</li>
  <li>P - 펜슬
이 정도 단축키만 외워도 정말 편하다.</li>
</ul>

<h2 id="앱-주요-기능-정리">앱 주요 기능 정리</h2>
<ul>
  <li>회원가입/로그인</li>
  <li>프로필</li>
  <li>홈 화면</li>
  <li>클라이밍 센터 정보</li>
  <li>캘린더 일지</li>
  <li>프로필 화면</li>
  <li>유저 차단/숨김</li>
</ul>

<p>위와 같이 정리했으며 MVP로 빠르게 출시 먼저 할 생각이라서 몇가지 기능이 빠진 상태로 출시될 수도 있다.</p>

<h2 id="마치며">마치며</h2>
<p>Flutter가 배우기 쉬운 건지 막상 배워보니 금방 배우고 할만 하더라. 
나중엔 인공지능 기능을 API로 만들어서 앱에 넣어보고 싶다.<br />
뭐든 버리는 경험은 없다고 생각한다. 이것 또한 나에게 좋은 경험이 될거라고 생각한다.</p>]]></content><author><name>김호성</name></author><category term="Flutter" /><category term="Flutter" /><category term="Git" /><category term="App" /><category term="Figma" /><summary type="html"><![CDATA[최근에 취미로 클라이밍을 하고 있는데 괜찮은 커뮤니티 앱이 있다면 참 좋겠다 싶었다. 기다릴 내가 아니다. 이번 기회에 앱도 만들어 보자라는 생각으로 친구랑 둘이 배워서 만들기로 했다.]]></summary></entry><entry><title type="html">Jupyter Notebook에서 자동완성 기능 사용하기</title><link href="http://localhost:4000/python/jupyter-notebook-autocomplete/" rel="alternate" type="text/html" title="Jupyter Notebook에서 자동완성 기능 사용하기" /><published>2022-04-30T00:00:00+09:00</published><updated>2022-04-30T00:00:00+09:00</updated><id>http://localhost:4000/python/jupyter-notebook-autocomplete</id><content type="html" xml:base="http://localhost:4000/python/jupyter-notebook-autocomplete/"><![CDATA[<p>주피터 노트북에서도 vscode처럼 자동완성 기능을 사용할 수 있다.<br />
이런 기능을 사용할 수 있다는 것을 오늘 처음 알게 되었는데 너무 좋아서 감격스러움에 바로 글을 작성하고 있다.</p>

<p>방법은 너무나도 간단하다.<br />
우선 2가지의 방법이 있다.</p>

<h2 id="방법1">방법1</h2>
<p>터미널에 아래와 같이 jedi를 삭제해준다.<br />
<code class="language-plaintext highlighter-rouge">pip uninstall jedi</code></p>

<h2 id="방법2">방법2</h2>
<p>jedi를 삭제하지 않으려면 주피터 노트북에서 아래와 같은 magic command를 입력해준다.<br />
<code class="language-plaintext highlighter-rouge">%config Completer.use_jedi = False</code></p>

<h2 id="사용법1">사용법1</h2>
<p>코드 도중 Tab키로 자동완성할 수 있다. <br />
<img width="433" alt="post" src="https://user-images.githubusercontent.com/86637300/135465424-621c935c-db26-4d69-b82b-4c6a5c5e36f0.png" /></p>

<h2 id="사용법2">사용법2</h2>
<p>Shift+Tab을 누르면 해당 Docstring을 확인할 수 있다.<br />
<img width="754" alt="post2" src="https://user-images.githubusercontent.com/86637300/135466289-b07addec-90a1-433a-9f4d-2d6297b843d8.png" /></p>]]></content><author><name>김호성</name></author><category term="Python" /><category term="Python" /><category term="Jupyter" /><summary type="html"><![CDATA[주피터 노트북에서도 vscode처럼 자동완성 기능을 사용할 수 있다. 이런 기능을 사용할 수 있다는 것을 오늘 처음 알게 되었는데 너무 좋아서 감격스러움에 바로 글을 작성하고 있다.]]></summary></entry><entry><title type="html">OpenCV를 이용한 영상처리</title><link href="http://localhost:4000/python/opencv-video/" rel="alternate" type="text/html" title="OpenCV를 이용한 영상처리" /><published>2021-10-16T00:00:00+09:00</published><updated>2021-10-16T00:00:00+09:00</updated><id>http://localhost:4000/python/opencv-video</id><content type="html" xml:base="http://localhost:4000/python/opencv-video/"><![CDATA[<p>나는 자율주행 인공지능을 공부하고 싶다.<br />
자율주행 인공지능은 카메라를 통해 촬영하는 영상을 인식해야하기 때문에 영상을 처리하는 방법을 알고싶었다.</p>

<p>그러던 중 아래 링크를 발견했다.<br />
<a href="https://learnopencv.com/read-write-and-display-a-video-using-opencv-cpp-python/">Read, Write and Display a video using OpenCV |</a></p>

<p>그래서 위 글을 간략하게 리뷰해보면서 OpenCV를 통한 영상처리에 대해 공부해보려고 한다.</p>

<h2 id="비디오란">비디오란?</h2>
<p><img src="https://user-images.githubusercontent.com/86637300/137582120-78d33600-f1ca-4d0e-8215-f4a8d202b432.gif" alt="The-Horse-in-Motion-anim" />
먼저, 비디오란 무엇인가?<br />
비디오는 이미지 시퀀스 즉, 사진들을 연속적으로 나열해서 빠르게 전환시켜 보이게되는 것이다.</p>

<p>여기서 이미지가 얼마나 빨리 전환되는지 측정하는 것은 초당 프레임(FPS)라는 것이다.<br />
FPS가 40이라는 말은 초당 40개의 이미지가 표시된다는 의미이다.</p>

<h2 id="비디오-읽어오기">비디오 읽어오기</h2>
<p>비디오 파일을 읽기 위한 첫 번째 단계는 VideoCapture 객체를 만드는 것이다.<br />
이 인수는 장치(카메라)의 index가 되거나 비디오 파일의 이름이 될 수 있다.</p>

<p>영상 출처: <a href="https://pixabay.com/videos/puppies-dogs-friendship-joy-69168/">Puppies Dogs Friendship - Free video on Pixabay</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="n">default_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="s">'HOME'</span><span class="p">)</span>
<span class="n">video_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">default_dir</span><span class="p">,</span> <span class="s">'Puppies.mp4'</span><span class="p">)</span>

<span class="c1"># Create a VideoCapture object and read from input file
# If the input is the camera, pass 0 instead of the video file name
</span><span class="n">cap</span> <span class="o">=</span>  <span class="n">cv2</span><span class="p">.</span><span class="nc">VideoCapture</span><span class="p">(</span><span class="n">video_path</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="비디오-표시하기">비디오 표시하기</h2>
<p>VideoCapture 객체가 생성된 후 프레임별로 영상을 표시할 수 있다.<br />
그리고 비디오의 프레임은 단순히 이미지이므로 imshow() 함수를 사용하여 표시할 수 있다.</p>

<p>비디오에서 imshow() 함수 뒤에 waitKey() 함수로 각 프레임을 일시정지한다.<br />
이미지의 경우, waitKey() 함수에 0을 넣지만, 비디오 재생을 위해서는 0보다 큰 숫자를 넣어야 한다.<br />
0은 무한한 시간 동안 일시정지하기 때문이다.<br />
이 숫자는 각 프레임이 표시되기를 원하는 시간(ms)과 같다.</p>

<p>웹켐에서는 1을 사용하는 것이 적절하다고 한다.<br />
왜냐하면 waitKey에서 지연을 1ms로 지정하더라도 디스플레이 프레임 속도가 웹캠의 프레임 속도에 의해 제한되기 때문이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check if camera opened successfully
</span><span class="nf">if </span><span class="p">(</span><span class="n">cap</span><span class="p">.</span><span class="nf">isOpened</span><span class="p">()</span><span class="o">==</span> <span class="bp">False</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="err">“</span><span class="n">Error</span> <span class="n">opening</span> <span class="n">video</span> <span class="n">stream</span> <span class="ow">or</span> <span class="nb">file</span><span class="err">”</span><span class="p">)</span>

<span class="c1"># Read until video is completed
</span><span class="nf">while</span><span class="p">(</span><span class="n">cap</span><span class="p">.</span><span class="nf">isOpened</span><span class="p">()):</span>
    <span class="c1"># Capture frame-by-frame
</span>    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cap</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">ret</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
    <span class="c1"># Display the resulting frame
</span>        <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="err">‘</span><span class="n">Frame</span><span class="err">’</span><span class="p">,</span><span class="n">frame</span><span class="p">)</span>
        <span class="c1"># Press Q on keyboard to  exit
</span>        <span class="k">if</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="nf">ord</span><span class="p">(</span><span class="err">‘</span><span class="n">q</span><span class="err">’</span><span class="p">):</span>
            <span class="k">break</span>
        <span class="c1"># Break the loop
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">break</span>

<span class="c1"># When everything done, release the video capture object
</span><span class="n">cap</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>

<span class="c1"># Closes all the frames
</span><span class="n">cv2</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div>
<p><img width="956" alt="Frame" src="https://user-images.githubusercontent.com/86637300/137582113-4c0c6a31-e7f8-4a05-8d7a-badbdb132c5e.png" />
(재생됨)</p>

<h2 id="비디오-작성하기">비디오 작성하기</h2>
<p>그 다음 단계는 비디오를 저장하는 것이다.</p>

<p>이미지의 경우 cv2.imwrite()를 사용하기만 하면 된다.<br />
하지만 동영상의 경우 VideoWriter 객체를 만들어야 한다.</p>

<p>먼저, 출력 파일 이름을 지정해야 한다.<br />
그 다음, FourCC 코드와 FPS를 지정해야 한다.<br />
마지막으로 프레임 크기를 지정해야 한다.</p>

<p>FourCC는 비디오 코덱을 지정하는 데 사용되는 4byte 코드다.<br />
사용 가능한 코드 목록은 fourcc.org 에서 찾을 수 있다.</p>

<p>하지만 FourCC의 일부 코드는 시스템에 따라 작동이 되지 않을 수도 있다.<br />
MJPG는 안전한 선택이라고 한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define the codec and create VideoWriter object.The output is stored in 'outpy.avi' file.
# Define the fps to be equal to 10. Also frame size is passed.
</span>
<span class="n">out</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nc">VideoWriter</span><span class="p">(</span><span class="s">'outpy.avi'</span><span class="p">,</span><span class="n">cv2</span><span class="p">.</span><span class="nc">VideoWriter_fourcc</span><span class="p">(</span><span class="s">'M'</span><span class="p">,</span><span class="s">'J'</span><span class="p">,</span><span class="s">'P'</span><span class="p">,</span><span class="s">'G'</span><span class="p">),</span> <span class="mi">10</span><span class="p">,</span> <span class="p">(</span><span class="n">frame_width</span><span class="p">,</span><span class="n">frame_height</span><span class="p">))</span>
</code></pre></div></div>
<p><img width="597" alt="Output" src="https://user-images.githubusercontent.com/86637300/137582105-fa6c0a5e-e88b-4703-bed4-f9c0aec89ace.png" /></p>

<h2 id="마무리">마무리</h2>
<p>최종적으로 코드를 작성하면 아래와 같다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
 
<span class="n">default_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="s">'HOME'</span><span class="p">)</span>
<span class="n">video_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">default_dir</span><span class="p">,</span> <span class="s">'Puppies.mp4'</span><span class="p">)</span>

<span class="c1"># Create a VideoCapture object and read from input file
# If the input is the camera, pass 0 instead of the video file name
</span><span class="n">cap</span> <span class="o">=</span>  <span class="n">cv2</span><span class="p">.</span><span class="nc">VideoCapture</span><span class="p">(</span><span class="n">video_path</span><span class="p">)</span>

<span class="c1"># Check if camera opened successfully
</span><span class="nf">if </span><span class="p">(</span><span class="n">cap</span><span class="p">.</span><span class="nf">isOpened</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Unable to read camera feed"</span><span class="p">)</span>
 
<span class="c1"># Default resolutions of the frame are obtained.The default resolutions are system dependent.
# We convert the resolutions from float to integer.
</span><span class="n">frame_width</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">cap</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
<span class="n">frame_height</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">cap</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>

<span class="c1"># Define the codec and create VideoWriter object.The output is stored in ‘outpy.avi’ file.
</span><span class="n">out</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nc">VideoWriter</span><span class="p">(</span><span class="err">‘</span><span class="n">outpy</span><span class="p">.</span><span class="n">avi</span><span class="err">’</span><span class="p">,</span><span class="n">cv2</span><span class="p">.</span><span class="nc">VideoWriter_fourcc</span><span class="p">(</span><span class="err">‘</span><span class="n">M</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="n">J</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="n">P</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="n">G</span><span class="err">’</span><span class="p">),</span> <span class="mi">120</span><span class="p">,</span> <span class="p">(</span><span class="n">frame_width</span><span class="p">,</span><span class="n">frame_height</span><span class="p">))</span>
<span class="nf">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cap</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">ret</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># Write the frame into the file ‘output.avi’
</span>        <span class="n">out</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
        <span class="c1"># Display the resulting frame   
</span>        <span class="n">cv2</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="err">‘</span><span class="n">frame</span><span class="err">’</span><span class="p">,</span><span class="n">frame</span><span class="p">)</span>
        <span class="c1"># Press Q on keyboard to stop recording
</span>        <span class="k">if</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="nf">ord</span><span class="p">(</span><span class="err">‘</span><span class="n">q</span><span class="err">’</span><span class="p">):</span>
            <span class="k">break</span>
        <span class="c1"># Break the loop
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">break</span> 

<span class="c1"># When everything done, release the video capture and video write objects
</span><span class="n">cap</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>
<span class="n">out</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>

<span class="c1"># Closes all the frames
</span><span class="n">cv2</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div>

<p>이렇게 비디오를 읽고, 쓰고, 표시하는 방법을 통해서 자율주행과 같은 컴퓨터 비전과 머신러닝 학습에 응용할 수 있을 것이다.</p>]]></content><author><name>김호성</name></author><category term="Python" /><category term="Python" /><category term="OpenCV" /><summary type="html"><![CDATA[나는 자율주행 인공지능을 공부하고 싶다. 자율주행 인공지능은 카메라를 통해 촬영하는 영상을 인식해야하기 때문에 영상을 처리하는 방법을 알고싶었다.]]></summary></entry><entry><title type="html">GitHub Commit 비밀번호를 토큰 방식으로 바꾸는 방법</title><link href="http://localhost:4000/git/github-password-token/" rel="alternate" type="text/html" title="GitHub Commit 비밀번호를 토큰 방식으로 바꾸는 방법" /><published>2021-08-14T00:00:00+09:00</published><updated>2021-08-14T00:00:00+09:00</updated><id>http://localhost:4000/git/github-password-token</id><content type="html" xml:base="http://localhost:4000/git/github-password-token/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/86637300/133374997-aa710b87-1b29-4fdf-bbdb-8fd8af5d4082.png" alt="github" /></p>
<h2 id="갑자기-github-commit-오류">갑자기 GitHub Commit 오류?</h2>
<p>평소와 똑같이 깃허브 커밋하는데 아래와 같은 오류가 발생했다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remote: Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead.  
remote: Please see https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/ for more information.  
The requested URL returned error: 403  
</code></pre></div></div>

<p>그래서 저기 써있는 링크에 들어가 봤더니 2021년 8월 13일 이후부터는 모든 Git 작업에 토큰 혹은 SSH키 인증이 필요하다고 한다.<br />
<a href="https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/">https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/</a></p>

<p>그래서 어떻게 토큰을 발급받는지 포스팅하려고 한다.</p>

<h2 id="token-발급받는-방법">Token 발급받는 방법</h2>
<h3 id="1번째">1번째</h3>
<p>Github 로그인하고 Settings에 들어간다.<br />
<img src="https://user-images.githubusercontent.com/86637300/133375007-303ccf84-94d4-48ea-9aae-79846b47fffd.png" alt="스크린샷 2021-09-15 오후 2 08 45" /></p>

<h3 id="2번째">2번째</h3>
<p>Developer settings 탭을 클릭한다.<br />
<img src="https://user-images.githubusercontent.com/86637300/133375013-533e8762-1a79-434f-86ba-84709f1af34e.png" alt="스크린샷 2021-09-15 오후 2 09 45" /></p>

<h3 id="3번째">3번째</h3>
<p>Personal access tokens 탭을 클릭하고, Generate new token 버튼을 클릭한다.<br />
<img src="https://user-images.githubusercontent.com/86637300/133375018-440ef686-2cc9-4a5f-8524-f23a060bebb7.png" alt="스크린샷 2021-09-15 오후 2 10 29" /></p>

<h3 id="4번째">4번째</h3>
<p>Note에 토큰 이름, Expiration에 만료기간 설정하고, Select scopes에서 권한을 설정해주면 된다. 
<img src="https://user-images.githubusercontent.com/86637300/133375022-5d1bb082-860e-43bc-97a2-4855336187d9.png" alt="스크린샷 2021-09-15 오후 2 12 38" /></p>

<h3 id="5번째">5번째</h3>
<p>Generate toekn 버튼을 클릭하면 토큰이 발급되는데, 그 코드를 안전한 곳에 복사해서 보관해줘야 한다.<br />
<img src="https://user-images.githubusercontent.com/86637300/133375026-b600e24a-814d-4fbb-9fd3-050b7b2ac140.png" alt="스크린샷 2021-09-15 오후 2 17 00" /></p>

<h3 id="mac">Mac</h3>
<p>맥북의 경우 Spotlight 검색에서 Keychain access를 검색해서 github를 검색하고 github.com 인터넷 암호를 제거해준다.</p>

<h2 id="다시-github-commit-시도">다시 GitHub Commit 시도</h2>
<p>이제 다시 git push를 하면<br />
<img width="324" alt="스크린샷 2021-09-15 오후 2 20 55" src="https://user-images.githubusercontent.com/86637300/133375225-864a692a-2881-4e16-a6f1-355d9e1ae9b1.png" /><br />
username과 password를 묻는다.<br />
username에는 내 깃허브 username을 똑같이 입력하고,<br />
password에는 내 깃허브 비밀번호가 아니라 아까 발급받은 ghp어쩌구로 시작하는 이상한 토큰을 입력하면 된다.</p>]]></content><author><name>김호성</name></author><category term="Git" /><category term="Git" /><summary type="html"><![CDATA[갑자기 GitHub Commit 오류? 평소와 똑같이 깃허브 커밋하는데 아래와 같은 오류가 발생했다. remote: Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead. remote: Please see https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/ for more information. The requested URL returned error: 403]]></summary></entry><entry><title type="html">변수/함수 명명 규칙 (PEP 8)</title><link href="http://localhost:4000/python/pep8/" rel="alternate" type="text/html" title="변수/함수 명명 규칙 (PEP 8)" /><published>2021-07-16T00:00:00+09:00</published><updated>2021-07-16T00:00:00+09:00</updated><id>http://localhost:4000/python/pep8</id><content type="html" xml:base="http://localhost:4000/python/pep8/"><![CDATA[<h2 id="pep8-쓰는-이유">pep8 쓰는 이유</h2>
<p>현업에서는 협업하게 되므로 내 코드를 나보다 남들이 더 많이 읽게 된다. 
이 때 어떤 변수가 무엇을 뜻하는지 알아볼 수 없고 가독성이 떨어진다면 코드를 유지보수하기 어려워진다.<br />
PEP 8은 이러한 문제를 해결하기 위해 스타일을 정해놓은 것이다.</p>

<h2 id="변수함수-명명-규칙-pep-8">변수/함수 명명 규칙 (PEP 8)</h2>
<h3 id="피해야-할-이름">피해야 할 이름</h3>
<ul>
  <li>소문자 l, 대문자 O, 대문자 I 하나만 변수의 이름으로 쓰는 것은 특정 폰트에서 헷갈릴 수 있기 때문에 권장하지 않는다.</li>
</ul>

<h3 id="패키지와-모듈의-이름">패키지와 모듈의 이름</h3>
<ul>
  <li>모듈 이름은 짧아야 하고, ==<strong>전부 소문자</strong>==여야 한다. 가독성을 위해서라면 밑줄(_)을 써야한다.</li>
  <li>패키지 이름도 짧아야 하고, ==<strong>전부 소문자</strong>==여야 한다. 밑줄은 권장하지 않는다.</li>
</ul>

<h3 id="함수의-이름">함수의 이름</h3>
<ul>
  <li>함수의 이름은 <strong>==원칙적으로 소문자==</strong>여야 하고, 가독성을 위해 밑줄(_)로 단어를 나눌 수 있다.</li>
  <li>간혹 threading.py같이 이미 대/소문자를 혼용하는 경우는 대/소문자를 같이 쓰는 경우도 있다.</li>
</ul>

<h3 id="클래스-이름">클래스 이름</h3>
<ul>
  <li>클래스 이름은 <strong>==CapWords 형식==</strong>(단어를 대문자로 시작)을 따른다.</li>
</ul>

<h3 id="exception의-이름">exception의 이름</h3>
<ul>
  <li>exception은 클래스이므로, class와 동일하게 적용한다.</li>
  <li>단, ==<strong>맨 뒤는 “Error”로 끝</strong>==나야 한다.</li>
</ul>

<h3 id="전역변수의-이름">전역변수의 이름</h3>
<p>(전역 변수는 하나의 모듈 안에서만 쓰인다고 가정)</p>
<ul>
  <li>전역 변수의 이름을 짓는 것은 함수 이름을 짓는 것과 같다.</li>
  <li>from M import *과 같이 쓰일 모듈에서는 global이 export 될 것을 방지하기 위해 all 메커니즘이나 ==<strong>맨 앞을 밑줄로 시작</strong>==해야 한다.</li>
</ul>

<h3 id="함수와-메소드의-인자">함수와 메소드의 인자</h3>
<ul>
  <li><strong>==메소드 인스턴스에 쓰이는 첫 번째 인자는 무조건 self==</strong>여야 한다.</li>
  <li><strong>==클래스 메소드의 첫 번째 인자는 무조건 cls==</strong>여야 한다.</li>
  <li>예약된 키워드(in 등)와 함수의 인자가 겹치는 경우, 변수 이름 맨 뒤에 밑줄 하나를 붙이는 것으로 대체한다.(ex, class_)</li>
</ul>

<h3 id="메소드-이름과-인스턴스의-이름">메소드 이름과 인스턴스의 이름</h3>
<ul>
  <li>함수 이름과 동일하다.</li>
  <li>public이 아닌 메소드나 인스턴스의 이름은 밑줄로 시작한다.</li>
</ul>

<h3 id="상수의-이름">상수의 이름</h3>
<ul>
  <li>상수 이름은 전부 대문자와 밑줄로 쓰는 것을 원칙으로 한다.</li>
</ul>

<p>출처: https://hashcode.co.kr/questions/489/파이썬에서-변수함수-이름을-지을-때-규칙이-있나요</p>

<h2 id="변수명-지어주는-사이트">변수명 지어주는 사이트</h2>
<p>이렇게 변수명을 짓기 귀찮아서 찾다보니 이런 사이트가 있었다.<br />
https://www.curioustore.com/#!/util/naming</p>

<h2 id="마치며">마치며</h2>
<p>게임 캐릭터 만들고 닉네임 짓는 것도 어려운데 변수의 이름을 남들이 알아보기 쉽게 작명해야 한다는게 많은 고민을 하게 만드는 일 같다.<br />
기억해야 할 점은 좋은 코드는 가독성이 좋아야 한다는 점인 것 같다.</p>]]></content><author><name>김호성</name></author><category term="Python" /><category term="Python" /><category term="PEP8" /><summary type="html"><![CDATA[pep8 쓰는 이유 현업에서는 협업하게 되므로 내 코드를 나보다 남들이 더 많이 읽게 된다. 이 때 어떤 변수가 무엇을 뜻하는지 알아볼 수 없고 가독성이 떨어진다면 코드를 유지보수하기 어려워진다. PEP 8은 이러한 문제를 해결하기 위해 스타일을 정해놓은 것이다.]]></summary></entry></feed>